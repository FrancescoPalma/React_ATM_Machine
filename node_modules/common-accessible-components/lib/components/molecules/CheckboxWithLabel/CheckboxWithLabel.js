'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactBemClasses = require('react-bem-classes');

var _reactBemClasses2 = _interopRequireDefault(_reactBemClasses);

var _atomsErrorMessage = require('../../atoms/ErrorMessage');

var _atomsErrorMessage2 = _interopRequireDefault(_atomsErrorMessage);

var _atomsFormGroup = require('../../atoms/FormGroup');

var _atomsFormGroup2 = _interopRequireDefault(_atomsFormGroup);

var _atomsHelpMessage = require('../../atoms/HelpMessage');

var _atomsHelpMessage2 = _interopRequireDefault(_atomsHelpMessage);

var _atomsInput = require('../../atoms/Input');

var _atomsInput2 = _interopRequireDefault(_atomsInput);

var _atomsLabel = require('../../atoms/Label');

var _atomsLabel2 = _interopRequireDefault(_atomsLabel);

var _coreDecorators = require('core-decorators');

var _mixins = require('../../../mixins');

var CheckboxWithLabel = (function (_Component) {
    _inherits(CheckboxWithLabel, _Component);

    function CheckboxWithLabel() {
        _classCallCheck(this, _CheckboxWithLabel);

        _get(Object.getPrototypeOf(_CheckboxWithLabel.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(CheckboxWithLabel, [{
        key: 'render',
        value: function render() {
            var _props = this.props;
            var className = _props.className;
            var inputClassName = _props.inputClassName;
            var labelClassName = _props.labelClassName;
            var helpMessageClassName = _props.helpMessageClassName;
            var errorMessageClassName = _props.errorMessageClassName;
            var id = _props.id;
            var label = _props.label;
            var error = _props.error;
            var invalid = _props.invalid;
            var helpText = _props.helpText;
            var touched = _props.touched;

            var other = _objectWithoutProperties(_props, ['className', 'inputClassName', 'labelClassName', 'helpMessageClassName', 'errorMessageClassName', 'id', 'label', 'error', 'invalid', 'helpText', 'touched']);

            var helpTextId = _lodash2['default'].camelCase(this.props.name) + 'HelpText';
            return _react2['default'].createElement(
                _atomsFormGroup2['default'],
                { className: this.getClasses(), invalid: this.isInvalidFormGroup },
                _react2['default'].createElement(
                    _atomsLabel2['default'],
                    {
                        htmlFor: this.props.name,
                        disabled: this.props.disabled,
                        className: this.getClassesFor(_atomsLabel2['default'])
                    },
                    _react2['default'].createElement(_atomsInput2['default'], _extends({
                        name: this.props.name,
                        id: this.props.name,
                        type: 'checkbox',
                        className: this.getClassesFor(_atomsInput2['default']),
                        'aria-invalid': !!this.props.error,
                        'aria-describedby': helpTextId
                    }, other)),
                    ' ' + this.props.label
                ),
                helpText ? _react2['default'].createElement(
                    _atomsHelpMessage2['default'],
                    {
                        id: helpTextId,
                        className: this.getClassesFor(_atomsHelpMessage2['default'])
                    },
                    helpText
                ) : null,
                touched && error ? _react2['default'].createElement(
                    _atomsErrorMessage2['default'],
                    {
                        className: this.getClassesFor(_atomsErrorMessage2['default'])
                    },
                    error
                ) : null
            );
        }
    }, {
        key: 'isInvalidFormGroup',
        get: function get() {
            return this.props.touched && this.props.invalid;
        }
    }], [{
        key: 'displayName',
        value: 'CheckboxWithLabel',
        enumerable: true
    }, {
        key: 'propTypes',
        value: {
            name: _react.PropTypes.string.isRequired,
            label: _react.PropTypes.string.isRequired,
            error: _react.PropTypes.any,
            touched: _react.PropTypes.bool,
            invalid: _react.PropTypes.bool,
            id: _react.PropTypes.string,
            className: _react.PropTypes.string,
            labelClassName: _react.PropTypes.string,
            inputClassName: _react.PropTypes.string,
            helpText: _react.PropTypes.string,
            checked: _react.PropTypes.bool,
            defaultChecked: _react.PropTypes.bool,
            disabled: _react.PropTypes.bool,
            readOnly: _react.PropTypes.bool,
            required: _react.PropTypes.bool
        },
        enumerable: true
    }]);

    var _CheckboxWithLabel = CheckboxWithLabel;
    CheckboxWithLabel = (0, _coreDecorators.mixin)(_mixins.classesMixin)(CheckboxWithLabel) || CheckboxWithLabel;
    CheckboxWithLabel = (0, _reactBemClasses2['default'])({
        block: 'dd-checkbox-field',
        modifiers: ['disabled', 'required', 'readonly', 'checked']
    })(CheckboxWithLabel) || CheckboxWithLabel;
    return CheckboxWithLabel;
})(_react.Component);

exports['default'] = CheckboxWithLabel;
module.exports = exports['default'];