'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var classesMixin = {
    getClasses: function getClasses() {
        var extraClasses = this.props.className && this.props.className.split(' ');
        var block = this.block();

        return (0, _classnames2['default'])(_extends(_defineProperty({}, block, true), _lodash2['default'].fromPairs(_lodash2['default'].map(extraClasses, function (cName) {
            return [cName, true];
        }))));
    },

    /**
     * return a list of classes for a component
     * @param  {Object} Element React component
     * @return {String}
     */
    getClassesFor: function getClassesFor(Element) {
        var classes = [this.props[_lodash2['default'].camelCase(Element.displayName) + 'ClassName'], this.element(_lodash2['default'].kebabCase(Element.displayName), {
            disabled: !!this.props.disabled,
            readonly: !!this.props.readOnly,
            required: !!this.props.required,
            checked: !!(this.props.checked || this.props.defaultChecked)
        })];
        return _lodash2['default'].compact(classes).join(' ');
    }
};

exports.classesMixin = classesMixin;
exports['default'] = {
    classesMixin: classesMixin
};