'use strict';

exports.__esModule = true;

var _PROJECT_CREATORS;

exports.getWebModulePrefs = getWebModulePrefs;
exports.npmModuleVars = npmModuleVars;
exports.validateProjectType = validateProjectType;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _copyTemplateDir = require('copy-template-dir');

var _copyTemplateDir2 = _interopRequireDefault(_copyTemplateDir);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _constants = require('./constants');

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _errors = require('./errors');

var _packageJson = require('../package.json');

var _packageJson2 = _interopRequireDefault(_packageJson);

var nwbVersion = _packageJson2['default'].version.split('.').slice(0, 2).concat('x').join('.');

function getWebModulePrefs(args, done) {
  // Determine defaults based on arguments
  var umd = true;
  if (args.umd === false) {
    umd = false;
  } else if (args.g || args.global) {
    umd = true;
  } else if (args.f || args.force) {
    umd = false;
  }
  var globalVariable = args.g || args.global || '';
  var jsNext = true;
  if (args.jsnext === false) {
    jsNext = false;
  }

  if (args.f || args.force) {
    return done({ umd: umd, globalVariable: globalVariable, jsNext: jsNext });
  }

  _inquirer2['default'].prompt([{
    type: 'confirm',
    name: 'umd',
    message: 'Do you want to create a UMD build for npm?',
    'default': umd
  }, {
    when: function when(_ref) {
      var umd = _ref.umd;
      return umd;
    },
    type: 'input',
    name: 'globalVariable',
    message: 'Which global variable should the UMD build export?',
    'default': globalVariable
  }, {
    type: 'confirm',
    name: 'jsNext',
    message: 'Do you want to create an ES6 modules build for npm?',
    'default': jsNext
  }], done);
}

function installReact(targetDir) {
  var command = 'npm install react@' + _constants.REACT_VERSION + ' react-dom@' + _constants.REACT_VERSION;
  _debug2['default'](targetDir + ' $ ' + command);
  _child_process.execSync(command, {
    cwd: targetDir,
    stdio: [0, 1, 2]
  });
}

function logCreatedFiles(targetDir, createdFiles) {
  createdFiles.sort().forEach(function (createdFile) {
    var relativePath = _path2['default'].relative(targetDir, createdFile);
    console.log('  ' + _chalk2['default'].green('create') + ' ' + relativePath);
  });
}

function npmModuleVars(vars) {
  vars.jsNextMain = vars.jsNext ? '\n  "jsnext:main": "es6/index.js",' : '';
  return vars;
}

function validateProjectType(projectType) {
  if (!projectType) {
    throw new _errors.UserError('nwb: a project type must be provided, one of: ' + _constants.PROJECT_TYPES.join(', '));
  }
  if (_constants.PROJECT_TYPES.indexOf(projectType) === -1) {
    throw new _errors.UserError('nwb: project type must be one of: ' + _constants.PROJECT_TYPES.join(', '));
  }
}

var PROJECT_CREATORS = (_PROJECT_CREATORS = {}, _PROJECT_CREATORS[_constants.REACT_APP] = function (args, name, targetDir, cb) {
  var templateDir = _path2['default'].join(__dirname, '../templates/' + _constants.REACT_APP);
  var templateVars = { name: name, nwbVersion: nwbVersion, reactVersion: _constants.REACT_VERSION };
  _copyTemplateDir2['default'](templateDir, targetDir, templateVars, function (err, createdFiles) {
    if (err) return cb(err);
    logCreatedFiles(targetDir, createdFiles);
    console.log('nwb: installing dependencies');
    installReact(targetDir);
    cb();
  });
}, _PROJECT_CREATORS[_constants.REACT_COMPONENT] = function (args, name, targetDir, cb) {
  getWebModulePrefs(args, function (_ref2) {
    var umd = _ref2.umd;
    var globalVariable = _ref2.globalVariable;
    var jsNext = _ref2.jsNext;

    var templateDir = _path2['default'].join(__dirname, '../templates/' + _constants.REACT_COMPONENT);
    var templateVars = npmModuleVars({ umd: umd, globalVariable: globalVariable, jsNext: jsNext, name: name, nwbVersion: nwbVersion, reactVersion: _constants.REACT_VERSION });
    _copyTemplateDir2['default'](templateDir, targetDir, templateVars, function (err, createdFiles) {
      if (err) return cb(err);
      logCreatedFiles(targetDir, createdFiles);
      console.log('nwb: installing dependencies');
      installReact(targetDir);
      cb();
    });
  });
}, _PROJECT_CREATORS[_constants.WEB_APP] = function (args, name, targetDir, cb) {
  var templateDir = _path2['default'].join(__dirname, '../templates/' + _constants.WEB_APP);
  var templateVars = { name: name, nwbVersion: nwbVersion };
  _copyTemplateDir2['default'](templateDir, targetDir, templateVars, function (err, createdFiles) {
    if (err) return cb(err);
    logCreatedFiles(targetDir, createdFiles);
    cb();
  });
}, _PROJECT_CREATORS[_constants.WEB_MODULE] = function (args, name, targetDir, cb) {
  getWebModulePrefs(args, function (_ref3) {
    var umd = _ref3.umd;
    var globalVariable = _ref3.globalVariable;
    var jsNext = _ref3.jsNext;

    var templateDir = _path2['default'].join(__dirname, '../templates/' + _constants.WEB_MODULE);
    var templateVars = npmModuleVars({ umd: umd, globalVariable: globalVariable, jsNext: jsNext, name: name, nwbVersion: nwbVersion });
    _copyTemplateDir2['default'](templateDir, targetDir, templateVars, function (err, createdFiles) {
      if (err) return cb(err);
      logCreatedFiles(targetDir, createdFiles);
      cb();
    });
  });
}, _PROJECT_CREATORS);

exports['default'] = function (args, type, name, dir, cb) {
  PROJECT_CREATORS[type](args, name, dir, cb);
};