'use strict';

exports.__esModule = true;
exports['default'] = server;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

/**
 * Start an express server which uses webpack-dev-middleware to build and serve
 * assets using Webpack's watch mode, and webpack-hot-middleware to hot reload
 * changes in the browser.
 *
 * If static path config is also provided, express will also be used to serve
 * static content from the given path.
 */

function server(webpackConfig, _ref, cb) {
  var fallback = _ref.fallback;
  var noInfo = _ref.noInfo;
  var port = _ref.port;
  var staticPath = _ref.staticPath;

  var app = _express2['default']();
  var compiler = _webpack2['default'](webpackConfig);

  app.use(require('webpack-dev-middleware')(compiler, {
    noInfo: noInfo,
    publicPath: webpackConfig.output.publicPath,
    stats: {
      colors: true
    }
  }));

  app.use(require('webpack-hot-middleware')(compiler));

  if (staticPath) {
    app.use(_express2['default']['static'](staticPath));
  }

  if (fallback) {
    app.use(function (req, res, next) {
      // Only fall back for GET methods which accept HTML and don't appear to
      // end with a file extension.
      if (req.method !== 'GET' || !req.accepts('html') || /\.[\w]{1,4}$/i.test(req.path)) {
        return next();
      }
      _fs2['default'].readFile(_path2['default'].resolve('public/index.html'), 'utf8', function (err, html) {
        if (err) return next(err);
        // Rewrite relative build URLs to be absolute so they work from any path
        res.send(html.replace(/="build\//g, '="/build/'));
      });
    });
  }

  app.listen(port, 'localhost', function (err) {
    if (err) return cb(err);
    console.log(_chalk2['default'].green('nwb: dev server listening at http://localhost:' + port));
  });
}

module.exports = exports['default'];