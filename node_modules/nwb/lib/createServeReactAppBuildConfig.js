'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _errors = require('./errors');

/**
 * Creates a build configuration object which will be used to create a Webpack
 * config for serving a React app.
 */

exports['default'] = function (config) {
  var entry = config.entry;
  var output = config.output;
  var plugins = config.plugins;
  var _config$staticPath = config.staticPath;
  var staticPath = _config$staticPath === undefined ? null : _config$staticPath;

  _assert2['default'](entry, 'entry config is required to serve a React app');
  _assert2['default'](output, 'output config is required to serve a React app');

  // Find the locally-installed version of React
  var reactPath = undefined;
  try {
    reactPath = _resolve2['default'].sync('react', { basedir: process.cwd() });
  } catch (e) {
    throw new _errors.UserError('nwb: React must be installed locally to serve a React app');
  }

  return {
    entry: entry,
    output: output,
    loaders: {
      babel: {
        // Configure hot reloading and error catching via react-transform
        query: {
          plugins: [require.resolve('babel-plugin-react-display-name'), require.resolve('babel-plugin-react-transform')],
          extra: {
            'react-transform': {
              transforms: [{
                transform: require.resolve('react-transform-hmr'),
                imports: [reactPath],
                locals: ['module']
              }, {
                transform: require.resolve('react-transform-catch-errors'),
                imports: [reactPath, require.resolve('redbox-noreact')]
              }]
            }
          }
        }
      }
    },
    plugins: plugins,
    server: {
      staticPath: staticPath
    }
  };
};

module.exports = exports['default'];