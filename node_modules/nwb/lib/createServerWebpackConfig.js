'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _createWebpackConfig = require('./createWebpackConfig');

var _createWebpackConfig2 = _interopRequireDefault(_createWebpackConfig);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _getPluginConfig = require('./getPluginConfig');

var _getPluginConfig2 = _interopRequireDefault(_getPluginConfig);

var _getUserConfig = require('./getUserConfig');

var _getUserConfig2 = _interopRequireDefault(_getUserConfig);

/**
 * Creates the final Webpack config for serving a web app with hot reloading,
 * using build and user configuration.
 */

exports['default'] = function (args, buildConfig) {
  var userConfig = _getUserConfig2['default'](args);
  var pluginConfig = _getPluginConfig2['default']();

  var entry = buildConfig.entry;
  var output = buildConfig.output;
  var _buildConfig$plugins = buildConfig.plugins;
  var plugins = _buildConfig$plugins === undefined ? {} : _buildConfig$plugins;

  var otherBuildConfig = _objectWithoutProperties(buildConfig, ['entry', 'output', 'plugins']);

  _assert2['default'](entry, 'an entry file is required to serve a Webpack build');
  _assert2['default'](output, 'output config is required to serve a Webpack build');

  var hotMiddlewareOptions = args.reload ? '?reload=true' : '';

  if (args['auto-install']) {
    _debug2['default']('configuring auto-install');
    plugins.install = { save: true };
  }

  return _createWebpackConfig2['default'](_extends({
    server: true,
    devtool: '#eval-source-map',
    entry: [
    // Polyfill EventSource for IE, as webpack-hot-middleware/client uses it
    require.resolve('eventsource-polyfill'), require.resolve('webpack-hot-middleware/client') + hotMiddlewareOptions, entry],
    output: output,
    plugins: plugins
  }, otherBuildConfig), pluginConfig, userConfig.webpack);
};

module.exports = exports['default'];