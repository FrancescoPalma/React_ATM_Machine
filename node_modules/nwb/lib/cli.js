'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _chalk = require('chalk');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _packageJson = require('../package.json');

var _packageJson2 = _interopRequireDefault(_packageJson);

exports['default'] = function (argv, cb) {
  var args = _minimist2['default'](argv, {
    alias: {
      h: 'help',
      v: 'version'
    },
    boolean: ['help', 'version']
  });

  var command = args._[0];

  if (args.version || /^v(ersion)?$/.test(command)) {
    console.log('v' + _packageJson2['default'].version);
    process.exit(0);
  }

  if (args.help || !command || /^h(elp)?$/.test(command)) {
    console.log('Usage: ' + _chalk.green('nwb') + ' ' + _chalk.yellow('<command>') + '\n\nOptions:\n  ' + _chalk.cyan('-h, --help') + '     display this help message\n  ' + _chalk.cyan('-v, --version') + '  print nwb\'s version\n\nProject creation commands:\n  ' + _chalk.green('init') + ' ' + _chalk.yellow('<project-type>') + ' ' + _chalk.cyan('[name]') + '\n    initialise a project in the current directory\n\n  ' + _chalk.green('new') + ' ' + _chalk.yellow('<project-type> <name>') + '\n    create a project in a new directory\n\n  ' + _chalk.cyan('-f, --force') + '   force project creation, don\'t ask questions\n  ' + _chalk.cyan('-g, --global') + '  global variable name to export in the UMD build\n  ' + _chalk.cyan('--no-jsnext') + '   disable npm ES6 modules build\n  ' + _chalk.cyan('--no-umd') + '      disable npm UMD module build\n\n  Project types:\n    ' + _chalk.cyan('react-app') + '        a React app\n    ' + _chalk.cyan('react-component') + '  a React component module with a demo app\n    ' + _chalk.cyan('web-app') + '          a plain JavaScript app\n    ' + _chalk.cyan('web-module') + '       a plain JavaScript module\n\nGeneric development commands:\n  ' + _chalk.green('build') + '\n    clean and build the project\n\n  ' + _chalk.green('clean') + '\n    delete built resources\n\n  ' + _chalk.green('serve') + '\n    serve an app, or a component\'s demo app, with hot reloading\n    ' + _chalk.cyan('--auto-install') + '  auto install missing npm dependencies\n    ' + _chalk.cyan('--fallback') + '      serve the index page from any path\n    ' + _chalk.cyan('--info') + '          show webpack module info\n    ' + _chalk.cyan('--port') + '          port to run the dev server on ' + _chalk.cyan('(default: 3000)') + '\n    ' + _chalk.cyan('--reload') + '        auto reload the page if hot reloading fails\n\n  ' + _chalk.green('test') + '\n    run unit tests\n    ' + _chalk.cyan('--coverage') + '  create a code coverage report\n    ' + _chalk.cyan('--server') + '    keep running tests on every change\n\nProject type-specific commands:\n  ' + _chalk.green('build-demo') + '\n    build a demo app from demo/src/index.js to demo/dist/\n  ' + _chalk.green('build-module') + '\n    create an ES5 build for an npm module (ES6 modules build requires config)\n  ' + _chalk.green('build-react-app') + '\n    build a react app from src/index.js to public/build/\n  ' + _chalk.green('build-umd') + '\n    create a UMD build for an npm module (requires config)\n  ' + _chalk.green('build-web-app') + '\n    build a web app from src/index.js to public/build/\n  ' + _chalk.green('clean-app') + '\n    delete public/build/\n  ' + _chalk.green('clean-demo') + '\n    delete demo/dist/\n  ' + _chalk.green('clean-module') + '\n     delete coverage/, es6/ and lib/\n  ' + _chalk.green('clean-umd') + '\n    delete umd/\n  ' + _chalk.green('serve-react-app') + '\n    serve a React app from src/index.js\n  ' + _chalk.green('serve-react-demo') + '\n    serve a React demo app from demo/src/index.js\n  ' + _chalk.green('serve-web-app') + '\n    serve a web app from src/index.js\n');
    process.exit(args.help || command ? 0 : 1);
  }

  var unknownCommand = function unknownCommand() {
    console.error(_chalk.red('nwb: unknown command:') + ' ' + _chalk.yellow(command));
    process.exit(1);
  };

  // Validate the command is in foo-bar-baz format before trying to resolve a
  // module path with it.
  if (!/^[a-z]+(?:-[a-z]+)*$/.test(command)) {
    unknownCommand();
  }

  var commandModulePath = undefined;
  try {
    commandModulePath = require.resolve('./commands/' + command);
  } catch (e) {
    unknownCommand();
  }

  var commandModule = require(commandModulePath);
  if (commandModule['default']) {
    commandModule = commandModule['default'];
  }
  commandModule(args, cb);
};

module.exports = exports['default'];