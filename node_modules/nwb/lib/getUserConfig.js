'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = getUserConfig;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _constants = require('./constants');

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _errors = require('./errors');

var DEFAULT_BUILD_CONFIG = {
  externals: {},
  global: '',
  jsNext: false,
  umd: false
};

var DEFAULT_WEBPACK_CONFIG = {
  loaders: {},
  plugins: {}
};

// TODO Remove in nwb 0.9
var BUILD_CONFIG_PROPS = Object.keys(DEFAULT_BUILD_CONFIG);
var warnedAboutBuildConfig = false;
var warnedAboutDefineConfig = false;
var warnedAboutWebpackConfig = false;
var warnedAboutExtraLoaders = false;

function applyDefaultConfig(userConfig, topLevelProp, defaults) {
  if (!(topLevelProp in userConfig)) {
    userConfig[topLevelProp] = _extends({}, defaults);
  } else {
    Object.keys(defaults).forEach(function (prop) {
      if (!(prop in userConfig[topLevelProp])) {
        userConfig[topLevelProp][prop] = defaults[prop];
      }
    });
  }
}

function getUserConfig() {
  var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var _ref$required = _ref.required;
  var required = _ref$required === undefined ? false : _ref$required;

  // Try to load default user config, or use a config file path we were given
  // (undocumented).
  var userConfig = {};
  var userConfigPath = args.absConfig || _path2['default'].resolve(args.config || 'nwb.config.js');

  // Bail early if a config file is required and doesn't exist
  var configFileExists = _glob2['default'].sync(userConfigPath).length !== 0;
  if (required && !configFileExists) {
    throw new _errors.UserError('nwb: couldn\'t find a config file at ' + userConfigPath);
  }

  // If a config file exists, it should be a valid module regardless of whether
  // or not it's required.
  if (configFileExists) {
    try {
      userConfig = require(userConfigPath);
      _debug2['default']('imported config module from %s', userConfigPath);
    } catch (e) {
      throw new _errors.UserError('nwb: couldn\'t import the config file at ' + userConfigPath);
    }
  }

  if (typeof userConfig == 'function') {
    userConfig = userConfig({
      command: args._[0],
      webpack: _webpack2['default']
    });
  }

  if ((required || 'type' in userConfig) && _constants.PROJECT_TYPES.indexOf(userConfig.type) === -1) {
    throw new _errors.UserError('nwb: invalid project type configured in ' + userConfigPath + ': ' + userConfig.type, 'nwb: \'type\' config must be one of: ' + _constants.PROJECT_TYPES.join(', '));
  }

  // TODO Remove in nwb 0.9
  var topLevelBuildConfig = BUILD_CONFIG_PROPS.filter(function (prop) {
    return prop in userConfig;
  });
  if (topLevelBuildConfig.length > 0) {
    (function () {
      if (!warnedAboutBuildConfig) {
        console.warn(_chalk2['default'].magenta(['nwb: the top level of your nwb config contains the following npm module build configuration:', 'nwb: ' + topLevelBuildConfig.join(', '), 'nwb: from nwb 0.9 onward this must be moved into a "build" object'].join('\n')));
        warnedAboutBuildConfig = true;
      }
      var buildConfig = _extends({}, DEFAULT_BUILD_CONFIG);
      BUILD_CONFIG_PROPS.forEach(function (prop) {
        if (prop in userConfig) {
          buildConfig[prop] = userConfig[prop];
          delete userConfig[prop];
        }
      });
      userConfig.build = buildConfig;
    })();
  }
  var toplevelWebpackConfig = ['define', 'loaders'].filter(function (prop) {
    return prop in userConfig;
  });
  if (toplevelWebpackConfig.length > 0) {
    if (!warnedAboutWebpackConfig) {
      console.warn(_chalk2['default'].magenta(['nwb: the top level of your nwb config contains the following webpack configuration:', 'nwb: ' + toplevelWebpackConfig.join(', '), 'nwb: from nwb 0.9 onward this must this to be moved into a "webpack" object'].join('\n')));
      warnedAboutWebpackConfig = true;
    }
    var webpackConfig = _extends({}, DEFAULT_WEBPACK_CONFIG);
    // 0.8 config props don't match 0.9, so manually upgrade them one at a time
    if ('define' in userConfig) {
      if (!warnedAboutDefineConfig) {
        console.warn(_chalk2['default'].magenta('nwb: from nwb 0.9 onward webpack "define" config must be inside a "plugins" object'));
        warnedAboutDefineConfig = true;
      }
      webpackConfig.plugins.define = userConfig.define;
      delete userConfig.define;
    }
    if ('loaders' in userConfig) {
      webpackConfig.loaders = userConfig.loaders;
      delete userConfig.loaders;
    }
    if (webpackConfig.loaders.extra && !warnedAboutExtraLoaders) {
      console.warn(_chalk2['default'].magenta('nwb: from nwb 0.9 onward extra webpack loaders must be defined in webpack.extra.module.loaders'));
      warnedAboutExtraLoaders = true;
    }
    userConfig.webpack = webpackConfig;
  }

  // Set defaults for config objects
  applyDefaultConfig(userConfig, 'build', DEFAULT_BUILD_CONFIG);
  applyDefaultConfig(userConfig, 'webpack', DEFAULT_WEBPACK_CONFIG);

  // If the user provided Babel config, automatically apply it to babel-loader
  // as query config unless there's already some set.
  if (userConfig.babel) {
    if (!userConfig.webpack.loaders.babel) {
      userConfig.webpack.loaders.babel = { query: userConfig.babel };
      _debug2['default']('added babel-loader with user babel config');
    } else if (!userConfig.webpack.loaders.babel.query) {
      userConfig.webpack.loaders.babel.query = userConfig.babel;
      _debug2['default']('added query to babel-loader with user babel config');
    }
  }

  _debug2['default']('final user config: %o', userConfig);

  return userConfig;
}

module.exports = exports['default'];