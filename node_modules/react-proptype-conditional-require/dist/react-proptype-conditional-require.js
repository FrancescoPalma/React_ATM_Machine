'use strict';

var VALIDATOR_ARG_ERROR_MESSAGE = 'The typeValidator argument must be a function ' + 'with the signature function(props, propName, componentName).';

var MESSAGE_ARG_ERROR_MESSAGE = 'The error message is optional, but must be a string if provided.';

var propIsRequired = function propIsRequired(condition, props, propName, componentName) {
  if (typeof condition === 'boolean') {
    return condition;
  } else if (typeof condition === 'function') {
    return condition(props, propName, componentName);
  } else if (Boolean(condition) === true) {
    return Boolean(condition);
  }

  return false;
};

var propExists = function propExists(props, propName) {
  return props.hasOwnProperty(propName);
};

var missingPropError = function missingPropError(props, propName, componentName, message) {
  if (Boolean(message)) {
    return new Error(message);
  }

  return new Error('Required ' + props[propName] + ' `' + propName + '`' + (' was not specified in `' + componentName + '`.'));
};

var guardAgainstInvalidArgTypes = function guardAgainstInvalidArgTypes(typeValidator, message) {
  if (typeof typeValidator !== 'function') {
    throw new TypeError(VALIDATOR_ARG_ERROR_MESSAGE);
  }

  if (Boolean(message) && typeof message !== 'string') {
    throw new TypeError(MESSAGE_ARG_ERROR_MESSAGE);
  }
};

var isRequiredIf = function isRequiredIf(typeValidator, condition, message) {
  guardAgainstInvalidArgTypes(typeValidator, message);

  return function (props, propName, componentName) {
    if (propIsRequired(condition, props, propName, componentName)) {
      if (propExists(props, propName)) {
        return typeValidator(props, propName, componentName);
      }

      return missingPropError(props, propName, componentName, message);
    }

    // Is not required, so just run typeValidator.
    return typeValidator(props, propName, componentName);
  };
};

module.exports = isRequiredIf;